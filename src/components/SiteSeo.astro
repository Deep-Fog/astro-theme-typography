---
import { SEO, type SEOProps } from 'astro-seo'
import { getImage } from 'astro:assets'
import { themeConfig } from '~/.config'

interface Props {
  title?: string
  desc?: string
  banner?: ImageMetadata
  jsonLd?: Record<string, any>[]
  keywords?: string
  author?: string
  category?: string
  tags?: string[]
  publishDate?: string
  updatedDate?: string
  canonicalUrl?: string
  locale?: string
  type?: 'website' | 'article' | 'blog' | 'product' | 'profile' | 'book'
}

const props = Astro.props

const configSEO = themeConfig.seo
const configSite = themeConfig.site

const title = props.title ?? configSite.title
const desc = props.desc ?? configSite.description
const canonical = props.canonicalUrl ?? configSite.website
const twitter = configSEO.twitter
const rss = new URL('/atom.xml', Astro.site).toString()
const optimizedImage = await getOptimizedImageURL()
const keywords = props.keywords ?? configSite.description
const author = props.author ?? configSite.author
const currentUrl = new URL(Astro.url.pathname, Astro.site).toString()
const locale = props.locale ?? themeConfig.appearance.locale ?? 'zh-CN'
const pageType = props.type ?? (Astro.url.pathname.includes('/posts/') ? 'article' : 'website')

const seoLinks = [
  { rel: 'icon', href: '/favicon.svg', type: 'image/svg+xml' },
  {
    rel: 'alternate',
    type: 'application/rss+xml',
    title: themeConfig.site.title,
    href: rss,
  },
  // PWA相关链接
  { rel: 'manifest', href: '/manifest.json' },
  { rel: 'apple-touch-icon', href: '/favicon.svg' },
  ...configSEO.link,
]

const seoMeta = [
  { name: 'viewport', content: 'width=device-width' },
  { name: 'generator', content: Astro.generator },
  { name: 'description', content: desc },
  { name: 'keywords', content: keywords },
  { name: 'author', content: author },
  { name: 'robots', content: 'index, follow' },
  { name: 'googlebot', content: 'index, follow' },
  { name: 'canonical', content: currentUrl },
  // Open Graph 基本标签
  { property: 'og:title', content: title },
  { property: 'og:description', content: desc },
  { property: 'og:image', content: optimizedImage },
  { property: 'og:url', content: currentUrl },
  { property: 'og:site_name', content: configSite.title },
  { property: 'og:locale', content: locale },
  { property: 'og:type', content: pageType },
  // Twitter Card 标签
  { name: 'twitter:image:src', content: optimizedImage },
  { name: 'twitter:image:alt', content: desc },
  { name: 'twitter:creator', content: twitter },
  { name: 'twitter:site', content: twitter },
  { name: 'twitter:card', content: 'summary_large_image' },
  { name: 'twitter:title', content: title },
  { name: 'twitter:description', content: desc },
  { name: 'twitter:url', content: currentUrl },
  // PWA相关元标签
  { name: 'theme-color', content: themeConfig.appearance.colorsLight.primary },
  { name: 'apple-mobile-web-app-capable', content: 'yes' },
  { name: 'apple-mobile-web-app-status-bar-style', content: 'default' },
  { name: 'apple-mobile-web-app-title', content: title },
  { name: 'application-name', content: title },
  { name: 'msapplication-TileColor', content: themeConfig.appearance.colorsLight.primary },
  ...configSEO.meta,
]

const openGraph: SEOProps['openGraph'] = {
  basic: {
    title: title,
    type: pageType,
    image: optimizedImage,
    url: currentUrl,
  },
  optional: {
    description: desc,
    siteName: configSite.title,
    locale: locale,
  },
  article: {
    author: author,
    publishedTime: props.publishDate,
    modifiedTime: props.updatedDate,
    section: props.category || '',
    tags: props.tags || [],
  },
  image: {
    alt: desc,
    width: 1200,
    height: 630,
  }
}

async function getOptimizedImageURL() {
  const image = props.banner && (await getImage({ src: props.banner, format: 'jpeg', width: 1200, height: 630 }))
  return new URL(image?.src ?? '/placeholder.png', Astro.url).toString()
}
---

<SEO
  charset="utf-8"
  title={title}
  description={desc}
  extend={{ link: seoLinks, meta: seoMeta }}
  openGraph={openGraph}
/>

{/* 渲染JSON-LD结构化数据 */}
{(props.jsonLd || configSEO.jsonLd) && 
  (props.jsonLd || configSEO.jsonLd || []).map(data => (
    <script type="application/ld+json" is:inline set:html={JSON.stringify(data)} />
  ))
}

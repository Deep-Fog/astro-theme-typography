---
import type { GetStaticPaths, InferGetStaticPropsType } from 'astro'
import { themeConfig } from '~/.config'
import Comments from '~/components/Comments.astro'
import Pagination from '~/components/Pagination.astro'
import SiteSeo from '~/components/SiteSeo.astro'
import LayoutDefault from '~/layouts/LayoutDefault.astro'
import LayoutPost from '~/layouts/LayoutPost.astro'
import { getPosts, getPathFromCategory } from '~/utils'
import { render } from 'astro:content'

export const getStaticPaths = (async () => {
  const posts = await getPosts()
  return posts.map((post, idx) => {
    const prev = posts[idx - 1]
    const next = posts[idx + 1]
    return {
      params: { id: post.id },
      props: { entry: post, next, prev },
    }
  })
}) satisfies GetStaticPaths

// type Params = InferGetStaticParamsType<typeof getStaticPaths>
type Props = InferGetStaticPropsType<typeof getStaticPaths>

const { entry, prev, next } = Astro.props
const { Content } = await render(entry)
const { translate: t } = Astro.locals

function getUrl(id: string) {
  return `/posts/${id}`
}
---

<LayoutDefault>
  <SiteSeo 
    slot="seo" 
    title={entry.data.title} 
    desc={entry.data.description} 
    banner={entry.data.banner}
    keywords={entry.data.categories?.join(', ')}
    author={entry.data.author}
    type="article"
    locale={themeConfig.appearance.locale}
    category={entry.data.categories?.[0]}
    tags={entry.data.categories}
    publishDate={entry.data.pubDate?.toISOString()}
    updatedDate={entry.data.modDate?.toISOString()}
    jsonLd={[
      {
        '@context': 'https://schema.org',
        '@type': 'BlogPosting',
        'headline': entry.data.title,
        'description': entry.data.description,
        'image': entry.data.banner ? new URL(entry.data.banner.src, Astro.site).toString() : new URL('/placeholder.png', Astro.site).toString(),
        'datePublished': entry.data.pubDate?.toISOString(),
        'dateModified': entry.data.modDate?.toISOString() || entry.data.pubDate?.toISOString(),
        'author': {
          '@type': 'Person',
          'name': entry.data.author || themeConfig.site.author,
          'url': themeConfig.site.website
        },
        'publisher': {
          '@type': 'Organization',
          'name': themeConfig.site.title,
          'url': new URL('/', Astro.site).toString(),
          'logo': {
            '@type': 'ImageObject',
            'url': new URL('/favicon.svg', Astro.site).toString(),
            'width': '96',
            'height': '96'
          }
        },
        'mainEntityOfPage': {
          '@type': 'WebPage',
          '@id': new URL(Astro.url.pathname, Astro.site).toString()
        },
        'keywords': entry.data.categories?.join(', '),
        'articleSection': entry.data.categories?.[0] || '',
        'inLanguage': themeConfig.appearance.locale || 'zh-CN',
        'wordCount': entry.body ? entry.body.split(/\s+/g).length : 0,
        'isAccessibleForFree': 'True'
      },
      {
        '@context': 'https://schema.org',
        '@type': 'BreadcrumbList',
        'itemListElement': [
          {
            '@type': 'ListItem',
            'position': 1,
            'name': themeConfig.site.title,
            'item': new URL('/', Astro.site).toString()
          },
          {
            '@type': 'ListItem',
            'position': 2,
            'name': entry.data.categories?.[0] || t('Uncategorized'),
            'item': entry.data.categories?.[0] 
              ? new URL(`/categories/${getPathFromCategory(entry.data.categories[0], themeConfig.site.categoryMap)}`, Astro.site).toString()
              : new URL('/categories', Astro.site).toString()
          },
          {
            '@type': 'ListItem',
            'position': 3,
            'name': entry.data.title,
            'item': new URL(Astro.url.pathname, Astro.site).toString()
          }
        ]
      }
    ]}
  />

  <LayoutPost post={entry}>
    <Content />
  </LayoutPost>

  <Pagination
    showLeft={Boolean(prev)}
    leftTitle={`${t('prev_post')}: ${prev?.data.title}`}
    leftUrl={getUrl(prev?.id)}
    showRight={Boolean(next)}
    rightTitle={`${t('next_post')}: ${next?.data.title}`}
    rightUrl={getUrl(next?.id)}
    showPageCount={false}
  />
  <!-- BUG 这里使用 client:visible 会导致构建失败。ref: https://github.com/withastro/astro/issues/7329 -->
  <Comments post={entry} />
</LayoutDefault>

<script>
  import '@github/clipboard-copy-element'

  document.addEventListener('clipboard-copy', (event) => {
    const target = event.target as HTMLElement
    const icon = target.querySelector('.icon') as HTMLElement
    icon.classList.replace('i-mdi-content-copy', 'i-mdi-check')
    setTimeout(() => {
      icon.classList.replace('i-mdi-check', 'i-mdi-content-copy')
    }, 1500)
  })

  const codeBlocks = Array.from(document.querySelectorAll('pre'))
  const icon = "<div class='i-mdi-content-copy icon text-white'></div>"
  for (const codeBlock of codeBlocks) {
    const wrapper = document.createElement('div')
    wrapper.className = 'code-container'

    const copyButton = document.createElement('clipboard-copy')
    const code = codeBlock.querySelector('code')
    copyButton.value = code?.textContent ?? ''
    copyButton.className = 'clipboard-copy'
    copyButton.innerHTML = icon

    codeBlock.appendChild(copyButton)

    codeBlock.parentNode?.insertBefore(wrapper, codeBlock)
    wrapper.appendChild(codeBlock)
  }
</script>

<style is:global>
  .code-container {
    position: relative;
  }
  .clipboard-copy {
    position: absolute;
    top: 0.5rem;
    right: 0.5rem;
    width: 1.75rem;
    height: 1.75rem;
    display: flex;
    justify-content: center;
    align-items: center;
    border-radius: 0.25rem;
  }

  .clipboard-copy:hover {
    background-color: #30363d;
  }
</style>
